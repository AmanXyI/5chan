// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile{
  id String @id @default(uuid())
  username String @unique
  profileImageURL String?

  userId String @unique
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
 
  boards ProfilesOnBoards[]
  threads Thread[]
  comments Comment[]

  @@index([userId])
}

model Board {
  id String @id @default(uuid())
  title String @unique
  description String
  profileUrl String?

  threads Thread[]
  profiles ProfilesOnBoards[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TODO - defile roles for profiles in boards by creating new table for roles for each board

// NOTE - I can use profile on boards to assign roles to users

model ProfilesOnBoards{
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  boardId String 
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@id([boardId,profileId])
}

model Thread{
  id String @id @default(uuid())
  title String
  // TODO - change description to content
  description String
  imageUrl String?
  upvotes Int
  downvotes Int

  comments Comment[]

  boardId String
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  profileId String
  profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Comment{
  id String @id @default(uuid())
  text String
  upvotes Int
  downvotes Int

  threadId String
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  profileId String
  profile Profile @relation(fields: [profileId],references: [id ],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([threadId])
}


// Auth
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String? 
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  // boards UsersOnBoards[]

  profile Profile?

  

 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}


